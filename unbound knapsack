//recurssion
int fun(int n,int tw,int val[],int wt[]){
    if(n==0){
        return (tw/wt[0])*val[0];
    }
    
    int nottake,take;
    take=INT_MIN;
    nottake=fun(n-1,tw,val,wt);
    if(tw>=wt[n]){
        take=val[n]+fun(n,tw-wt[n],val,wt);
    }
    return max(take,nottake);
}
    int knapSack(int N, int W, int val[], int wt[])
    {
        return fun(N-1,W,val,wt);
    }
//tabulation

    int knapSack(int N, int W, int val[], int wt[])
    {
       vector<vector<int>>dp(N,vector<int>(W+1,0));
       for(int i=0;i<=W;i++){
           dp[0][i]=(int)(i/wt[0]*val[0]);
       }
       
       for(int i=1;i<N;i++){
           for(int j=0;j<=W;j++){
               int take,nottake;
               take=0;
               nottake=dp[i-1][j];
               if(j>=wt[i]){
                   take=val[i]+dp[i][j-wt[i]];
               }
               
               dp[i][j]=max(take,nottake);
           }
       }
       
       return dp[N-1][W];
    }
