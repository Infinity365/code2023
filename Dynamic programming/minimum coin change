//recurssion

int fun(int coins[],int M,int V){
	    if(M==0){
	        if(V%coins[0]==0)
	        return V/coins[0];
	        else
	        return 1e9;
	    }
	    int take,nottake;
	    take=1e9;
	    nottake=fun(coins,M-1,V);
	    if(V>=coins[M]){
	        take=1+fun(coins,M,V-coins[M]);
	    }
	    return min(take,nottake);
	}
	int minCoins(int coins[], int M, int V) 
	{ 
	    int ans=fun(coins,M-1,V);
	    if(ans>=1e9)
	    return -1;
	    else
	    return ans;
	} 

 //tabulation
 int minCoins(int coins[], int M, int V) 
	{ 
	    vector<vector<int>>dp(M,vector<int>(V+1,0));
	    
	    for(int i=0;i<=V;i++){
	        if(i%coins[0]==0)
	        dp[0][i]=i/coins[0];
	        else
	        dp[0][i]=1e9;
	    }
	    
	    for(int i=1;i<M;i++){
	        for(int j=1;j<=V;j++){
	            int take,nottake;
	            take=1e9;
	            nottake=dp[i-1][j];
	            if(j>=coins[i]){
	                take=1+dp[i][j-coins[i]];
	            }
	            dp[i][j]=min(take,nottake);
	        }
	    }
	    if(dp[M-1][V]>=1e9)
	    return -1;
	    else
	    return dp[M-1][V];
	    
	} 
